trigger:
- main

pool:
  name: Default

variables:
  dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionGuid)
  backendImageRepository: 'backend-3Tier'
  frontendImageRepository: 'frontend-3Tier'
  containerRegistry: '3tier.azurecr.io'
  tag: '$(Build.BuildId)'
  system.debug: true

  # SonarQube Configuration
  SonarQube: 'sonarqube'
  scannerMode: 'CLI'
  configMode: 'manual'
  cliProjectKey: '3TiertoAKS_3TiertoAKS_AZDC06zBgkN1PnsVfle6'
  cliProjectName: 'myapp'
  cliSourceBack: 'backend'
  cliSourceFront: 'frontend/src'
  SonarURL: 'http://137.116.199.163:9000/'

stages:
  - stage: Build
    displayName: Build and Test
    jobs:
      - job: BuildAndTest
        displayName: Build, Test, and Analyze
        steps:
          - checkout: self

          - script: |
              echo "Listing root directory structure:"
              ls -R
            displayName: 'List root directory structure'

          - script: |
              echo "Listing backend directory structure:"
              ls -R backend
            displayName: 'List backend directory structure'

          - script: |
              echo "Listing frontend directory structure:"
              ls -R frontend
            displayName: 'List frontend directory structure'

          - script: |
              echo "Testing connection to SonarQube server"
              curl -v $(SonarURL)
            displayName: 'Test connection to SonarQube server'

          - script: |
              echo "JAVA_HOME is set to:"
              echo $JAVA_HOME
            displayName: 'Check JAVA_HOME'

          # Ensure Node.js is installed
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Ensure Node.js is installed'

          # Prepare SonarQube Analysis Configuration for Backend
          # - task: SonarQubePrepare@6
          #   inputs:
          #     SonarQube: '$(SonarURL)'
          #     scannerMode: 'CLI'
          #     configMode: 'manual'
          #     cliProjectKey: '$(cliProjectKey)'
          #     cliSources: '$(cliSourceBack)'
          #     extraProperties: |
          #       sonar.verbose=true
          #       sonar.login='admin '
          #       sonar.password='Fruitcake1.'
          #   displayName: 'Prepare SonarQube analysis for Backend'
          
          
          # Prepare Analysis Configuration task
          - task: SonarQubePrepare@5
            inputs:
              SonarQube: '$(SonarQube)'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliSources: '$(cliSourceBack)'
              cliProjectKey: '$(cliProjectKey)'

          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js for Backend'

          - script: |
              cd backend
              npm install
              npm test
            displayName: 'Install dependencies and run tests for Backend'

          # Run Code Analysis task
          - task: SonarQubeAnalyze@5
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'

          - task: Docker@2
            displayName: 'Build and push Backend Docker image'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(containerRegistry)/$(backendImageRepository)'
              command: 'buildAndPush'
              Dockerfile: 'backend/Dockerfile'
              tags: |
                $(tag)

          # Prepare SonarQube Analysis Configuration for Frontend
          - task: SonarQubePrepare@5
            inputs:
              SonarQube: '$(SonarQube)'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliSources: '$(cliSourceFront)'
              cliProjectKey: '$(cliProjectKey)'

          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js for Frontend'

          - script: |
              cd frontend
              npm install
              npm run test
            displayName: 'Install dependencies and run tests for Frontend'

          - task: SonarQubeAnalyze@5
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'

          - task: Docker@2
            displayName: 'Build and push Frontend Docker image'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(containerRegistry)/$(frontendImageRepository)'
              command: 'buildAndPush'
              Dockerfile: 'frontend/Dockerfile'
              tags: |
                $(tag)
