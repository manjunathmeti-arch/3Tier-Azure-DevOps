trigger:
- main

pool:
  name: Default

variables:
  dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionGuid)  # Replace with your actual service connection ID
  backendImageRepository: 'backend-3Tier'
  frontendImageRepository: 'frontend-3Tier'
  containerRegistry: '3tier.azurecr.io'
  tag: '$(Build.BuildId)'

  #------------------------------------------FOR SONARQUBE TESTING ONLY---------------------------------------------------
  SonarQube: 'SonarQube'  # This should match your service connection name in DevOps
  scannerMode: 'CLI'
  configMode: 'manual'
  cliProjectKey: 'myapp'  # Specify your project key here
  cliProjectName: 'myapp'  # Specify your project name here
  cliSourceBack: 'backend/src'  # Adjust this to point to your source code directory
  cliSourceFront: 'frontend/src'
  #------------------------------------------------------------------------------------------------------------------

stages:
  - stage: Build
    displayName: Build and Test
    jobs:
      - job: BuildAndTest
        displayName: Build, Test, and Analyze
        steps:
          - checkout: self

          - script: |
              echo "Listing root directory structure:"
              ls -R
            displayName: 'List root directory structure'

          # Print backend directory structure to verify paths
          - script: |
              echo "Listing backend directory structure:"
              ls -R backend
            displayName: 'List backend directory structure'

          # Print frontend directory structure to verify paths
          - script: |
              echo "Listing frontend directory structure:"
              ls -R frontend
            displayName: 'List frontend directory structure'

          # Prepare SonarQube Analysis Configuration for Backend
          - task: SonarQubePrepare@6
            inputs:
              SonarQube: '$(SonarQube)'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: '$(cliProjectKey)'
              cliProjectName: '$(cliProjectName)'
              cliSources: '$(cliSourceBack)'
            displayName: 'Prepare SonarQube analysis for Backend'

          # Backend tasks
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js for Backend'

          - script: |
              cd backend
              npm install
              npm test
            displayName: 'Install dependencies and run tests for Backend'

          - task: SonarQubeAnalyze@6
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'
            displayName: 'Run SonarQube analysis for Backend'

          - task: Docker@2
            displayName: 'Build and push Backend Docker image'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(containerRegistry)/$(backendImageRepository)'
              command: 'buildAndPush'
              Dockerfile: 'backend/Dockerfile'
              tags: |
                $(tag)

          - task: SonarQubePrepare@6
            inputs:
              SonarQube: '$(SonarQube)'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: '$(cliProjectKey)'
              cliProjectName: '$(cliProjectName)'
              cliSources: '$(cliSourceFront)'
            displayName: 'Prepare SonarQube analysis for Frontend'

          # Frontend tasks
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js for Frontend'

          - script: |
              cd frontend
              npm install
              npm run test
            displayName: 'Install dependencies and run tests for Frontend'

          - task: SonarQubeAnalyze@6
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'
            displayName: 'Run SonarQube analysis for Frontend'

          - task: Docker@2
            displayName: 'Build and push Frontend Docker image'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(containerRegistry)/$(frontendImageRepository)'
              command: 'buildAndPush'
              Dockerfile: 'frontend/Dockerfile'
              tags: |
                $(tag)
